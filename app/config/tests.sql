-- √âtape 3 ‚Äì Tests relationnels √† r√©aliser

-- Suppressions critiques

-- Supprimez un tag li√© √† un item . R√©sultat attendu : Suppression de la ligne correspondante dans Item_Tag. Obtenu : r√©sultat attendu.
DELETE FROM Tag WHERE id = 1;


-- Supprimez un item pr√©sent dans une collection R√©sultat attendu : Suppression de la ligne correspondante dans Collection_Item et Item_Tag. Obtenu : Suppression correcte de la ligne dans Item_Tag. item_id pass√© en NULL dans Collection_Item (ON DELETE SET NULL). Modification en CASCADE. Un item inexistant ne peut pas rester dans une collection.
DELETE FROM Item WHERE id = 1;

-- Supprimez un operator ayant des messages ou des collections. R√©sultat attendu : Suppression de la collection,des messages. Obtenus: Pas de suppression de la collection car elle n'est pas li√©e √† un user -> ajout de la cl√© √©trang√®re operator_id ON DELETE CASCADE. Pas de suppression des messages car la table message ne reprend pas les ID des op√©rateurs. Pas de modification, les envois de messages peuvent √™tre fait par des personnes non enregistr√©es parmis les visiteurs.
DELETE FROM Operator WHERE id = 4; --id =1 est un admin, je n'ai pas os√© essayer de le supprimer üò¨

-- Insertions incoh√©rentes

-- Insertion d‚Äôune collection avec un operator_id inexistant. R√©sultat attendu : Insertion bloqu√©e car operator_id inexistant. Obtenu : Insertion r√©ussie --> bloquer l'insertion si l'operator_id est inexistant. Colonne operator_id mal configur√©e plus haut. Modifi√© comme necessaire
INSERT INTO Collection (label, description, operator_id) VALUES ('Collection inexistante', 'Description', 999);

-- Insertion d‚Äôun item_tag avec un item_id ou tag_id inexistant R√©sultat attendu : Insertions bloqu√©es gr√¢ce √† la contrainte des fk. Obtenu : r√©sultats attendus.
INSERT INTO Item_Tag (item_id, tag_id) VALUES (999, 1);
INSERT INTO Item_Tag (item_id, tag_id) VALUES (1, 999);

-- Insertion de deux items avec le m√™me slug. R√©sultat attendu:  Insertion impossible car slug a l'attribut UNIQUE. Obtenu : Resultat attendu.
INSERT INTO Item (type, label, slug, date_de_mise_en_vente, description, primary_picture, secondary_picture, prix, operator_id) VALUES
('bota', 'Item Dupliqu√© 1', 'slug-duplique', '2023-10-07 10:00:00', 'Description 1', 'image1.jpg', 'image1_2.jpg', 100.00, 1),
('bota', 'Item Dupliqu√© 2', 'slug-duplique', '2023-10-07 11:00:00', 'Description 2', 'image2.jpg', 'image2_2.jpg', 200.00, 2);

-- Insertion de deux operators avec le m√™me email. R√©sultat attendu : Insertion possible car pas d'attribut UNIQUE sur l'email de l'op√©rateur. Obtenu : r√©sultats attendus. Il n'est pas utile d'avoir une contrainte sur l'email.
INSERT INTO Operator (nom, pr√©nom, username, email, role) VALUES
('Dupont', 'Jean', 'jdupont1', 'jean.dupont@example.com', 'admin'),
('Martin', 'Sophie', 'smartin2', 'jean.dupont@example.com', 'visiteur');

-- Insertion d‚Äôun message vide ou sans email. R√©sultat attendu : Je n'y ai pas r√©fl√©chi. Obtanu : Insertions r√©ussies malgr√© l'attribut NOT NULL de email et contenu ü§î configuration mySQL √† modifier? -> mode strict activ√©, je n'ai plus de soucis.
INSERT INTO Message (date_de_r√©ception, nom, pr√©nom, email, t√©l√©phone, contenu) VALUES
('2023-10-08 09:00:00', 'Dupont', 'Jean', '', '0475123456', ''),
('2023-10-08 10:00:00', 'Martin', 'Sophie', NULL, '0475654321', 'Contenu du message');

-- Modifications sensibles

-- Modifier un id de tag ou item utilis√© ailleurs. R√©sultat attendu : UPDATE CASCADE : la modification se r√©percute partout o√π c'est n√©cessaire. Obtenu : R√©sultat attendu.
UPDATE Tag SET id = 999 WHERE id = 2; 
UPDATE Item SET id = 777 WHERE id = 3;

-- Changer le role d‚Äôun operator, pour un role inexistant (pas admin, user). R√©sultat attendu : Echec de l'update. Obtenu : Warning Data truncated. Le role 'inexistant' ne faisant pas partie de l'enum, il n'a pas remplac√© le role existant (visitor), mais l'a effac√©. Cel√† est du √† l'absence de mode strict de MySQL. Conseil de Claude : activer le mode strict.
UPDATE Operator SET role = 'inexistant' WHERE id = 3;

-- Modifier un slug ou un email. 
UPDATE Item SET slug = 'nouveau-slug' WHERE id = 1; -- La modification se passe comme pr√©vu. J'ai bien une erreur si j'essaie d'appliquer le m√™me slug √† un autre item.
UPDATE Operator SET email = 'nouvel.email@example.com' WHERE id = 1; -- idem, pas de probl√®me √† signaler.

-- Cas m√©tier √† interpr√©ter

-- Supprimer tous les items d‚Äôun tag : le tag reste-t-il utile ? Oui, car il pourrait √™tre r√©utilis√© √† post√©riori.
DELETE FROM Item_Tag WHERE tag_id = 1;

-- Supprimer tous les collection_items d‚Äôune collection : faut-il la conserver ? Dans la mesure o√π les collections sont cr√©√©es par les users, il n'est pas pertinent de conserver une collection vide.
DELETE FROM Collection_Item WHERE collection_id = 1;

-- Cr√©er une collection vide : est-ce logique ? Cel√† n'a pas de sens. Une collection doit avoir au moins 1 item. L'insertion fonctionne, mais rien n'est cr√©√© dans collection_item tant qu'aucun item n'est mis dans la collection.
INSERT INTO Collection (label, description) VALUES ('Collection Vide', 'Description de la collection vide');

-- Supprimer tous les messages d‚Äôun utilisateur : reste-t-il des donn√©es li√©es ? Il ne reste aucune donn√©es li√©e √† ce message. La table message et la table operator ne sont pas li√©es, il n'y a aucune incidence l'une sur l'autre, m√™me si le message supprim√© contient l'email d'un operator.
DELETE FROM Message WHERE email = 'robert.howard@example.com';
